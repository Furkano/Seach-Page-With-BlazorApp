@page "/"


<style>
    #minPrice:invalid {
        border: 1px solid red;
    }

    #maxPrice:invalid {
        border: 1px solid red;
    }
</style>
<!-- ========== MAIN CONTENT ========== -->
<main id="content" role="main">
    <!-- Title Section -->
    <div class="bg-light">
        <div class="container py-5">
            <div class="row align-items-sm-center">
                <div class="col-sm-6 mb-3 mb-sm-0">
                    <h1 class="h4 mb-0"><PageTitle>Seach-Page-With-BlazorApp</PageTitle></h1>
                </div>
            </div>
        </div>
    </div>

    <TopSearchBar></TopSearchBar>
    <!-- End Title Section -->
    <!-- Products & Filters Section -->
    @if (BookDtos != null)
    {
        <div class="container space-top-1 space-top-md-2 space-bottom-2 space-bottom-lg-3">
            <div class="row">
                <div class="col-lg-9">
                    <!-- Sorting -->
                <div class="row align-items-center mb-5">
                        <div class="col-sm mb-3 mb-sm-0">
                            <span class="font-size-1 ml-1"> @BookDtos.Total Books are founded </span>
                        </div>

                        <div class="col-sm-auto">
                            <div class="d-flex justify-content-sm-end align-items-center" style="box-sizing: border-box;">
                                <!-- Select -->
                            <div class="mr-2">
                                    <select class="js-custom-select custom-select-sm" size="1"
                                        style="opacity: 1; border-radius: 6.1875rem;height:35px;padding-top:0px;padding-bottom:0px;"
                                        data-hs-select2-options='{
                                            "minimumResultsForSearch": "Infinity",
                                            "customClass": "custom-select custom-select-sm",
                                            "dropdownAutoWidth": true,
                                            "width": "auto"}'
                                        @onchange="SelectOrderBook">
                                        <option value="priceLowToHigh" selected>Price (low - high)</option>
                                        <option value="priceHighToLow">Price (high - low)</option>
                                        <option value="likeCountHighToLow">Top sellers</option>
                                        <option value="likeCountLowToHigh">Worst sellers</option>
                                    </select>
                                </div>
                                <!-- End Select -->
                        </div>
                        </div>
                    </div>
                    <!-- End Sorting -->
                <Pagination TotalPageQuantity="totalPageQuantity" CurrentPage="currentPage" Radius="3" SelectedPage="SelectedPage"></Pagination>
                
                    @foreach (var book in BookDtos.Books)
                    {
                        @* <SingleBook OneBook="book"> </SingleBook>*@
                        <SingleBookPage OneBook="book"></SingleBookPage>
                    }

                    <div class="py-3"></div>

                    <!-- Pagination -->

                <Pagination TotalPageQuantity="totalPageQuantity" CurrentPage="currentPage" Radius="3" SelectedPage="SelectedPage"></Pagination>
                    <!-- End Pagination -->
                    <!-- Divider -->
                <div class="d-lg-none">
                        <hr class="my-11">
                    </div>
                    <!-- End Divider -->
            </div>

                <!-- Filters -->
            <div class="col-lg-3">
                    <EditForm Model="searchFormModel" OnSubmit="@SubmitSearchForm">
                        <DataAnnotationsValidator />
                        <div class="border-bottom pb-4 mb-4" style="padding-bottom: 1px !important;">
                            <h4>Fiyat Aralığı</h4>

                            <!-- Checkboxes -->
                        <div class="form-group d-flex align-items-center justify-content-between font-size-1 text-lh-lg text-body mb-1">
                            <label>Min</label>
                                <InputNumber class="form-control" id="minPrice" placeholder="Min Fiyat" pattern="[0-9]+"
                                         @bind-Value="@searchFormModel.MinPrice" style="width: 80%;height: calc(1em + 1.625rem);" />
                            </div>
                            <div class="form-group d-flex align-items-center justify-content-between font-size-1 text-lh-lg text-body mb-1">
                                <label>Max</label>
                                <InputNumber class="form-control" id="maxPrice" placeholder="Max Fiyat" pattern="[0-9]+"
                                         @bind-Value="searchFormModel.MaxPrice" style="width: 80%;height: calc(1em + 1.625rem);"/>
                            </div>
                            <!-- End Checkboxes -->
                    </div>
                        <ValidationSummary />
                        <div class="border-bottom pb-4 mb-4 scrollbar" style="height:200px;">
                            <h4>Kategoriler</h4>
                            @if (CategorieDtos is not null)
                            {
                                <CheckBoxList Data="@CategorieDtos"
                                      TextField="@((item)=>item.CategoryName)"
                                      ValueField="@((item)=>item.BookCount)"
                                      SelectedValues="@searchFormModel.SelectedCategory" />
                            }
                        </div>
                        <div class="border-bottom pb-4 mb-4 scrollbar" style="height:200px;">
                            <h4>Şehirler</h4>
                            @if (Cities is not null)
                            {
                                <CheckBoxList Data="@Cities"
                                      TextField="@((item)=>item.Name)"
                                      ValueField="@((item)=>item.BookCount)"
                                      SelectedValues="@searchFormModel.SelectedCity" />
                            }
                        </div>
                        @if (RatingDtos is not null)
                        {
                            <div class="border-bottom pb-4 mb-4 scrollbar" style="height:200px;">
                                <h4>Kategoriler</h4>
                                <CheckBoxListForRating Data="@RatingDtos"
                                               StarField="@((item)=>item.RatingStar)"
                                               CountField="@((item)=>item.BookCount)"
                                               SelectedValues="@searchFormModel.SelectedStar" />
                            </div>
                        }
                        <button type="submit" class="btn btn-sm btn-block btn-soft-secondary transition-3d-hover">Ara</button>
                    </EditForm>
                </div>
                <!-- End Filters -->
        </div>
        </div>
    }
    <!-- End Products & Filters Section -->
    <!-- Subscribe Section -->
    <div class="bg-light">
        <div class="container space-2">
            <div class="row justify-content-center">
                <div class="col-md-9 col-lg-6">
                    <!-- Title -->
                    <div class="text-center mb-4">
                        <h2 class="h1">Stay in the know</h2>
                        <p>Get special offers on the latest developments from Soys.</p>
                    </div>
                    <!-- End Title -->
                </div>
            </div>
        </div>
    </div>
    <!-- End Subscribe Section -->
    <!-- Clients Section -->
    <div class="container space-2" style="margin-bottom:4%;margin-top:4%;">
        <div class="row justify-content-between text-center">
            <div class="col-4 col-lg-2 mb-5 mb-lg-0">
                <div class="mx-3">
                    <img class="max-w-11rem max-w-md-13rem mx-auto" src="assets/svg/clients-logo/hollister.svg" alt="Image Description">
                </div>
            </div>
            <div class="col-4 col-lg-2 mb-5 mb-lg-0">
                <div class="mx-3">
                    <img class="max-w-11rem max-w-md-13rem mx-auto" src="assets/svg/clients-logo/levis.svg" alt="Image Description">
                </div>
            </div>
            <div class="col-4 col-lg-2 mb-5 mb-lg-0">
                <div class="mx-3">
                    <img class="max-w-11rem max-w-md-13rem mx-auto" src="assets/svg/clients-logo/new-balance.svg" alt="Image Description">
                </div>
            </div>
            <div class="col-4 col-lg-2">
                <div class="mx-3">
                    <img class="max-w-11rem max-w-md-13rem mx-auto" src="assets/svg/clients-logo/puma.svg" alt="Image Description">
                </div>
            </div>
            <div class="col-4 col-lg-2">
                <div class="mx-3">
                    <img class="max-w-11rem max-w-md-13rem mx-auto" src="assets/svg/clients-logo/nike.svg" alt="Image Description">
                </div>
            </div>
            <div class="col-4 col-lg-2">
                <div class="mx-3">
                    <img class="max-w-11rem max-w-md-13rem mx-auto" src="assets/svg/clients-logo/tnf.svg" alt="Image Description">
                </div>
            </div>
        </div>
    </div>
    <!-- End Clients Section -->
</main>


@code {

    [Parameter]
    public BookDto? BookDtos { get; set; }
    public List<CategoriesDto>? CategorieDtos { get; set; }
    public List<RatingDto>? RatingDtos { get; set; }
    public List<CityDto>? Cities { get; set; }
    public int totalPageQuantity { get; set; }
    public int currentPage { get; set; } = 1;
    public int quantityPerPage { get; set; } = 10;
    public string SelectedOrderBook { get; set; } = string.Empty;

    public SearchFormModel searchFormModel = new();

    protected override async Task OnInitializedAsync()
    {

        await LoadBook();
        await GetAllCategories();
        await GetAllRatingStars();
        await GetAllCities();
        SelectedOrderBook = SelectableOrderBookTypes.PriceLowToHigh;
    }
    private async Task LoadBook(int page = 1, int quantityPerPage = 10, string selectedOrderBook = SelectableOrderBookTypes.PriceLowToHigh)
    {
        if (string.IsNullOrEmpty(selectedOrderBook) is false)
        {
            BookDtos = await _elasticBookService.GetByOrderFilterAsync(page, quantityPerPage, selectedOrderBook);
            totalPageQuantity = (int)Math.Ceiling((decimal)BookDtos.Total / (decimal)quantityPerPage);
        }
        else
        {
            BookDtos = await _elasticBookService.GetAllBookNoFilteredAsync(page, quantityPerPage);
            totalPageQuantity = (int)Math.Ceiling((decimal)BookDtos.Total / (decimal)quantityPerPage);
        }

    }
    private async Task SelectedPage(int page)
    {
        currentPage = page;
        if (searchFormModel.IsAnyPropertyNotNull())
        {
            await LoadWithSearchForm(currentPage, quantityPerPage, SelectedOrderBook, searchFormModel);
        }
        else
        {
            await LoadBook(page);
        }
    }
    private async Task SelectOrderBook(ChangeEventArgs changeEventArgs)
    {
        if (changeEventArgs is not null)
        {
            Console.WriteLine("change: {0}", changeEventArgs.Value?.ToString());
            if (SelectedOrderBook.Equals(changeEventArgs.Value?.ToString()) is false)
            {
                currentPage = 1;
            }
            SelectedOrderBook = changeEventArgs.Value.ToString();
            if (searchFormModel.IsAnyPropertyNotNull())
            {
                await LoadWithSearchForm(currentPage, quantityPerPage, SelectedOrderBook, searchFormModel);
            }
            else
            {
                await LoadBook(currentPage, quantityPerPage, SelectedOrderBook);
            }
        }


    }
    private async Task GetAllCategories()
    {
        CategorieDtos = await _elasticBookService.GetAllCategoriesAsync();
    }
    private async Task GetAllRatingStars()
    {
        RatingDtos = await _elasticBookService.GetRatingsAndBookCounts();
    }
    private async Task GetAllCities()
    {
        Cities = await _elasticBookService.GetAllCityNamesAsync();
    }

    private async Task SubmitSearchForm()
    {
        Console.WriteLine("Ara button click:=>{0}", JsonConvert.SerializeObject(searchFormModel));
        await LoadWithSearchForm(currentPage, quantityPerPage, SelectedOrderBook, searchFormModel);
    }

    private async Task LoadWithSearchForm(int page, int quantityPerPage, string selectedOrderBook, SearchFormModel searchFormModel)
    {
        BookDtos = await _elasticBookService.GetWithSearchFilterForm(page, quantityPerPage, selectedOrderBook, searchFormModel);
        totalPageQuantity = (int)BookDtos.Total;
    }
}

